package gfx 
{
	import flash.display3D.IndexBuffer3D;
	import flash.display3D.VertexBuffer3D;
	import flash.geom.Matrix;
	import flash.geom.Matrix3D;
	import flash.geom.Vector3D;
	import gfx.lib.engine;
	import flash.display.*;
	import flash.display3D.*;
	import flash.display3D.textures.*;

	public class shapes3d1 extends engine
	{
		
		
		 private const VERTEX_SHADER: String =
        "m44 op, va0, vc0\n" + // 4x4 matrix transform
        "mov v0, va1";         // v0 = va1
        
    /*
        "m44 op, va0, vc0    \n" +    // 4x4 matrix transform 
        "mov v0, va1"; //copy color to varying variable v0
    */
    private const FRAGMENT_SHADER: String = 
        "add ft0.x, v0.x,     v0.y     \n" + 
        "add ft0.y, v0.y,     v0.z     \n" + 
        "add ft0.z, v0.z,     v0.w     \n" + 
        "add ft0.w, v0.w,     v0.x     \n" + 
        "sub ft0,   ft0,      fc1.xxxx \n" + 
        "slt ft0,   ft0,      fc1.yyyy \n" + 
        "mul ft0.x, ft0.x,    ft0.y    \n" + 
        "mul ft0.x, ft0.x,    ft0.z    \n" + 
        "mul ft0.x, ft0.x,    ft0.w    \n" + 
        "sub ft0.x, fc1.x,    ft0.x    \n" + 
        "kil ft0.x \n" + 
        "mov oc, fc0";
    /*
        "mov oc, v0"; //Set the output color to the value interpolated from the three triangle vertices 
    */
		
	
	
		override public function ready():void 
		{
			
			prepare(stage.stageWidth, stage.stageHeight);
			__ctx.enableErrorChecking = true;
			load_shapes();
			__ctx.setCulling( Context3DTriangleFace.NONE );
	
			
	
			default_shaders.upload(
			shaders_compiler.assemble(Context3DProgramType.VERTEX, VERTEX_SHADER),
			shaders_compiler.assemble(Context3DProgramType.FRAGMENT,FRAGMENT_SHADER)
			);
						
			
			
			__ctx.setProgramConstantsFromVector(Context3DProgramType.FRAGMENT, 0, Vector.<Number>([
            1, 1, 0, 1, // fc0 r,g,b,a
            1 - 0.01, 0, 0, 0 // fc1.x = 1 - line size, fc1.y = 0
        ]));
			
			__ctx.setProgram(default_shaders);
			
			
			
			
			
			
			__ctx.setVertexBufferAt( 0, vbf, 0, Context3DVertexBufferFormat.FLOAT_3 ); //va0 is position
			__ctx.setVertexBufferAt( 1, vbf, 3, Context3DVertexBufferFormat.FLOAT_4 ); //va1 is color
			
			
			
		}
		private var ry:Number = 0;
		override public function render():void 
		{
			__ctx.clear(0, 0, 1, 0);
			
			
			var mt:Matrix3D = new Matrix3D();			
			mt.identity();
			
			mt.appendRotation( ry, Vector3D.Y_AXIS);
			mt.appendRotation( ry, Vector3D.Z_AXIS);
	
			if (ry > 359) ry = 0; else ry++;
			
			mt.appendTranslation( 0, 0, 30);
			mt.append( projection);
			__ctx.setProgramConstantsFromMatrix( Context3DProgramType.VERTEX, 0, mt, true );
			

			

			for each(var ss:__shape3d in __shapes) {
					__ctx.drawTriangles( idx, ss.istart, ss.icount);
					break;
			}
			
			
			//__ctx.drawTriangles( idx, 0, this.total_traingles );
		}
		//=================================================
		private var __shapes:Vector.<__shape3d>=new Vector.<__shape3d>();
		private var total_traingles:uint = 0;
			
		private function load_shapes():void {
		
			
			var data:String = ( <![CDATA[
			[ 			
			{"name":"cube", "v":[-2.5,2.5,-2.5,0,0.848,-0.53,0,0,2.5,2.5,-2.5,0.349,0.625,-0.698,1,0,2.5,2.5,2.5,0.474,0.848,0.237,1,1,-2.5,2.5,2.5,-0.349,0.625,0.698,0,1,-2.5,2.5,-2.5,-1,0,0,0,0,-2.5,2.5,-2.5,0,0.848,-0.53,0,0,-2.5,0,-2.5,0,0,-1,0,0,2.5,0,-2.5,0.707,0,-0.707,0,0,2.5,0,2.5,0.707,0,0.707,0,0,-2.5,0,2.5,-0.707,0,0.707,0,0,-2.5,0,-2.5,-1,0,0,0,0,-2.5,0,-2.5,0,0,-1,0,0,-2.5,-2.5,-2.5,0,0,-1,0,0,2.5,-2.5,-2.5,0.894,0,-0.447,0,0,2.5,-2.5,2.5,0.447,0,0.894,0,0,-2.5,-2.5,2.5,-0.894,0,0.447,0,0,-2.5,-2.5,-2.5,-1,0,0,0,0,-2.5,-2.5,-2.5,0,0,-1,0,0,-2.5,-2.5,-2.5,0,-1,0,0,0,2.5,-2.5,-2.5,0,-1,0,0,0,2.5,-2.5,2.5,0,-1,0,0,0,-2.5,-2.5,2.5,0,-1,0,0,0,-2.5,-2.5,-2.5,0,0,0,0,0,-2.5,-2.5,-2.5,0,-1,0,0,0],"f":[0,6,1,1,6,7,1,7,2,2,7,8,2,8,3,3,8,9,3,9,4,4,9,10,4,10,5,5,10,11,6,12,7,7,12,13,7,13,8,8,13,14,8,14,9,9,14,15,9,15,10,10,15,16,10,16,11,11,16,17,12,18,13,13,18,19,13,19,14,14,19,20,14,20,15,15,20,21,15,21,16,16,21,22,16,22,17,17,22,23,2,0,1,0,2,3,19,18,20,21,20,18]},
			{"name":"cone", "v":[0,12.5,0,0.829,0.553,-0.087,0,0,0,12.5,0,0.829,0.553,0.087,0,0,0,12.5,0,0.793,0.553,0.258,0,0,0,12.5,0,0.722,0.553,0.417,0,0,0,12.5,0,0.619,0.553,0.558,0,0,0,12.5,0,0.49,0.553,0.674,0,0,0,12.5,0,0.339,0.553,0.761,0,0,0,12.5,0,0.173,0.553,0.815,0,0,0,12.5,0,0,0.553,0.833,0,0,0,12.5,0,-0.173,0.553,0.815,0,0,0,12.5,0,-0.339,0.553,0.761,0,0,0,12.5,0,-0.49,0.553,0.674,0,0,0,12.5,0,-0.619,0.553,0.558,0,0,0,12.5,0,-0.722,0.553,0.417,0,0,0,12.5,0,-0.793,0.553,0.258,0,0,0,12.5,0,-0.829,0.553,0.087,0,0,0,12.5,0,-0.829,0.553,-0.087,0,0,0,12.5,0,-0.793,0.553,-0.258,0,0,0,12.5,0,-0.722,0.553,-0.417,0,0,0,12.5,0,-0.619,0.553,-0.558,0,0,0,12.5,0,-0.49,0.553,-0.674,0,0,0,12.5,0,-0.339,0.553,-0.761,0,0,0,12.5,0,-0.173,0.553,-0.815,0,0,0,12.5,0,0,0.553,-0.833,0,0,0,12.5,0,0.173,0.553,-0.815,0,0,0,12.5,0,0.339,0.553,-0.761,0,0,0,12.5,0,0.49,0.553,-0.674,0,0,0,12.5,0,0.619,0.553,-0.558,0,0,0,12.5,0,0.722,0.553,-0.417,0,0,0,12.5,0,0.793,0.553,-0.258,0,0,0,12.5,0,0.829,0.553,-0.087,0,0,10,-2.5,0,0.995,-0.099,0,0,0,9.781,-2.5,2.079,0.973,-0.099,0.207,0,0,9.135,-2.5,4.067,0.909,-0.099,0.405,0,0,8.09,-2.5,5.878,0.805,-0.099,0.585,0,0,6.691,-2.5,7.431,0.666,-0.099,0.739,0,0,5,-2.5,8.66,0.498,-0.099,0.862,0,0,3.09,-2.5,9.511,0.307,-0.099,0.946,0,0,1.045,-2.5,9.945,0.104,-0.099,0.99,0,0,-1.045,-2.5,9.945,-0.104,-0.099,0.99,0,0,-3.09,-2.5,9.511,-0.308,-0.099,0.946,0,0,-5,-2.5,8.66,-0.498,-0.099,0.862,0,0,-6.691,-2.5,7.431,-0.666,-0.099,0.739,0,0,-8.09,-2.5,5.878,-0.805,-0.099,0.585,0,0,-9.135,-2.5,4.067,-0.909,-0.099,0.405,0,0,-9.781,-2.5,2.079,-0.973,-0.099,0.207,0,0,-10,-2.5,0,-0.995,-0.099,0,0,0,-9.781,-2.5,-2.079,-0.973,-0.099,-0.207,0,0,-9.135,-2.5,-4.067,-0.909,-0.099,-0.405,0,0,-8.09,-2.5,-5.878,-0.805,-0.099,-0.585,0,0,-6.691,-2.5,-7.431,-0.666,-0.099,-0.739,0,0,-5,-2.5,-8.66,-0.498,-0.099,-0.862,0,0,-3.09,-2.5,-9.511,-0.307,-0.099,-0.946,0,0,-1.045,-2.5,-9.945,-0.104,-0.099,-0.99,0,0,1.045,-2.5,-9.945,0.104,-0.099,-0.99,0,0,3.09,-2.5,-9.511,0.307,-0.099,-0.946,0,0,5,-2.5,-8.66,0.498,-0.099,-0.862,0,0,6.691,-2.5,-7.431,0.666,-0.099,-0.739,0,0,8.09,-2.5,-5.878,0.805,-0.099,-0.585,0,0,9.135,-2.5,-4.067,0.909,-0.099,-0.405,0,0,9.781,-2.5,-2.079,0.973,-0.099,-0.207,0,0,10,-2.5,0,0.995,-0.099,0,0,0,0,-12.5,0,0.705,-0.705,0.074,0,0,0,-12.5,0,0.674,-0.705,0.219,0,0,0,-12.5,0,0.614,-0.705,0.355,0,0,0,-12.5,0,0.527,-0.705,0.474,0,0,0,-12.5,0,0.417,-0.705,0.574,0,0,0,-12.5,0,0.288,-0.705,0.648,0,0,0,-12.5,0,0.147,-0.705,0.694,0,0,0,-12.5,0,0,-0.705,0.709,0,0,0,-12.5,0,-0.147,-0.705,0.694,0,0,0,-12.5,0,-0.288,-0.705,0.648,0,0,0,-12.5,0,-0.417,-0.705,0.574,0,0,0,-12.5,0,-0.527,-0.705,0.474,0,0,0,-12.5,0,-0.614,-0.705,0.355,0,0,0,-12.5,0,-0.674,-0.705,0.219,0,0,0,-12.5,0,-0.705,-0.705,0.074,0,0,0,-12.5,0,-0.705,-0.705,-0.074,0,0,0,-12.5,0,-0.674,-0.705,-0.219,0,0,0,-12.5,0,-0.614,-0.705,-0.355,0,0,0,-12.5,0,-0.527,-0.705,-0.474,0,0,0,-12.5,0,-0.417,-0.705,-0.574,0,0,0,-12.5,0,-0.288,-0.705,-0.648,0,0,0,-12.5,0,-0.147,-0.705,-0.694,0,0,0,-12.5,0,0,-0.705,-0.709,0,0,0,-12.5,0,0.147,-0.705,-0.694,0,0,0,-12.5,0,0.288,-0.705,-0.648,0,0,0,-12.5,0,0.417,-0.705,-0.574,0,0,0,-12.5,0,0.527,-0.705,-0.474,0,0,0,-12.5,0,0.614,-0.705,-0.355,0,0,0,-12.5,0,0.674,-0.705,-0.219,0,0,0,-12.5,0,0.705,-0.705,-0.074,0,0,0,-12.5,0,0.705,-0.705,0.074,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0,0,-12.5,0,0,0,0,0,0],"f":[0,31,1,1,31,32,1,32,2,2,32,33,2,33,3,3,33,34,3,34,4,4,34,35,4,35,5,5,35,36,5,36,6,6,36,37,6,37,7,7,37,38,7,38,8,8,38,39,8,39,9,9,39,40,9,40,10,10,40,41,10,41,11,11,41,42,11,42,12,12,42,43,12,43,13,13,43,44,13,44,14,14,44,45,14,45,15,15,45,46,15,46,16,16,46,47,16,47,17,17,47,48,17,48,18,18,48,49,18,49,19,19,49,50,19,50,20,20,50,51,20,51,21,21,51,52,21,52,22,22,52,53,22,53,23,23,53,54,23,54,24,24,54,55,24,55,25,25,55,56,25,56,26,26,56,57,26,57,27,27,57,58,27,58,28,28,58,59,28,59,29,29,59,60,29,60,30,30,60,61,31,62,32,32,62,63,32,63,33,33,63,64,33,64,34,34,64,65,34,65,35,35,65,66,35,66,36,36,66,67,36,67,37,37,67,68,37,68,38,38,68,69,38,69,39,39,69,70,39,70,40,40,70,71,40,71,41,41,71,72,41,72,42,42,72,73,42,73,43,43,73,74,43,74,44,44,74,75,44,75,45,45,75,76,45,76,46,46,76,77,46,77,47,47,77,78,47,78,48,48,78,79,48,79,49,49,79,80,49,80,50,50,80,81,50,81,51,51,81,82,51,82,52,52,82,83,52,83,53,53,83,84,53,84,54,54,84,85,54,85,55,55,85,86,55,86,56,56,86,87,56,87,57,57,87,88,57,88,58,58,88,89,58,89,59,59,89,90,59,90,60,60,90,91,60,91,61,61,91,92,62,93,63,63,93,94,63,94,64,64,94,95,64,95,65,65,95,96,65,96,66,66,96,97,66,97,67,67,97,98,67,98,68,68,98,99,68,99,69,69,99,100,69,100,70,70,100,101,70,101,71,71,101,102,71,102,72,72,102,103,72,103,73,73,103,104,73,104,74,74,104,105,74,105,75,75,105,106,75,106,76,76,106,107,76,107,77,77,107,108,77,108,78,78,108,109,78,109,79,79,109,110,79,110,80,80,110,111,80,111,81,81,111,112,81,112,82,82,112,113,82,113,83,83,113,114,83,114,84,84,114,115,84,115,85,85,115,116,85,116,86,86,116,117,86,117,87,87,117,118,87,118,88,88,118,119,88,119,89,89,119,120,89,120,90,90,120,121,90,121,91,91,121,122,91,122,92,92,122,123]}
		
			
			]
			]]> ).toString();
			

			//prep_texture();
			trace(data);
			var shapes:Object = JSON.parse(data);
			
			trace("shapes=" + shapes.length);
			
			var vtx:Vector.<Number> = new Vector.<Number>(2400);
			var inx:Vector.<uint> =new Vector.<uint>(2400);
			
			
			var vz:uint = 7;
			var vi:uint = 0;
			var ii:uint = 0;
			
			
			for (var s:uint = 0; s < shapes.length; s++)
			{
				var ss:__shape3d = new __shape3d();
				
				
				var vc:uint = vi /vz;
				
				for (var v:uint = 0; v < shapes[s].v.length ; v=v+8)
				{
					var x:Number = Number(shapes[s].v[v]);
					var y:Number = Number(shapes[s].v[v + 1]);
					var z:Number = Number(shapes[s].v[v + 2]);
					
					var nx:Number = Number(shapes[s].v[v+3]);
					var ny:Number = Number(shapes[s].v[v + 4]);
					var nz:Number = Number(shapes[s].v[v + 5]);
					
					var tx:Number = Number(shapes[s].v[v + 6]);
					var ty:Number =Number(shapes[s].v[v + 7]);

					
				
					//xyz
					vtx[vi++] = x; vtx[vi++] = y; vtx[vi++] = z;
					vtx[vi++] = 1; vtx[vi++] = 0; vtx[vi++] = 0;vtx[vi++] = 0;
				
					//uv	
					//vtx[vi++] = 1;vtx[vi++] = 1;				
								
					//nxnynz
				//vtx[vi++] = nx; vtx[vi++] = ny; vtx[vi++] = nz ;				
				
					//vtx[vi++] = 1; vtx[vi++] = 1; vtx[vi++] = 1;				
				
					
				}
				
				ss.istart = ii;
				
				
				for (var i:uint = 0; i < shapes[s].f.length; i++)
				{					
					inx[ii++] = vc + uint(shapes[s].f[i]);
				}
				ss.icount = shapes[s].f.length / 3;
				__shapes.push(ss);
			
			}
			
			
			trace("vi=" + vi + " |" +(vi / vz));
			
			idx	=__ctx.createIndexBuffer(ii);
			idx.uploadFromVector(inx, 0, ii);
			
			
			vbf = __ctx.createVertexBuffer(vi / vz, vz);					
			vbf.uploadFromVector(vtx, 0, vi / vz)
			
			
			
			
			for each(var sp:__shape3d in __shapes) {
				trace(sp.istart + "|" + sp.icount);		
			}
			
			//trace(vi+","+ii+" | "+__shapes.length);
			total_traingles = ii / 3;
			
			
			
		}
		
		//===========================
		private var vbf:VertexBuffer3D;
		private var idx:IndexBuffer3D;
		
		
	}

}
class __shape3d {
	public var istart:uint = 0;
	public var icount:uint = 0;
	
	
}